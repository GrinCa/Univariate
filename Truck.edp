//--------------------------------------------------------------------------
// Load libraries and mesh
//--------------------------------------------------------------------------


//verbosity = 10;

//loads
load "msh3" // for buildlayers function
load "gmsh" // for loading gmsh meshes

//includes
include "/home/julien/Documents/FreeFem_routines/exports.idp"


string root="Matrices/Truck/"; // Matrices/Plate/


//load the mesh from the Gmsh file
mesh3 Th = gmshload3("Truck.msh");

//region label
int acoustic = 1;
int PML = 2;
int surf = 3;

int[int] boundaryLabel(1);
boundaryLabel[0] = surf;

//--------------------------------------------------------------------------
// Define variables, functions, and macros
//--------------------------------------------------------------------------

macro Grad(p) [dx(p),dy(p),dz(p)] // EOM -- End Of Macro

//--------------------------------------------------------------------------
// Define finite element space, solid and fluid
//--------------------------------------------------------------------------

fespace VhF(Th,P2);
VhF p,v;


//--------------------------------------------------------------------------
// PML functions
//--------------------------------------------------------------------------

real lpml = 1.6;

real L1x = 1;
real L2x = L1x+lpml;
real L1y = 1;
real L2y = L1y+lpml;
real L1z = 4.8;
real L2z = L1z+lpml;

real km=2.2;
real sigma = 3.45;

func PML3x=1/(L2x-abs(x)) ;
func decay3x=(region==PML) ? 1+1i*sigma*PML3x/km : 1 ;
func PML3y=1/(L2y-abs(y)) ;
func decay3y=(region==PML) ? 1+1i*sigma*PML3y/km : 1 ;
func PML3z=1/(L2z-abs(z)) ;
func decay3z=(region==PML) ? 1+1i*sigma*PML3z/km : 1 ;


//--------------------------------------------------------------------------
// Define varf
//--------------------------------------------------------------------------

//Fluid
varf hr(p, v) = int3d(Th)( dx(p)*dx(v)*real( decay3y*decay3z/decay3x ) +
		        		   dy(p)*dy(v)*real( decay3x*decay3z/decay3y ) +
		        		   dz(p)*dz(v)*real( decay3x*decay3y/decay3z ) );
varf hi(p, v) = int3d(Th)( dx(p)*dx(v)*imag( decay3y*decay3z/decay3x ) +
       		   			   dy(p)*dy(v)*imag( decay3x*decay3z/decay3y ) +
   	   		   			   dz(p)*dz(v)*imag( decay3x*decay3y/decay3z ) );

varf q(p, v)  = int3d(Th)( p*v );


//--------------------------------------------------------------------------
// Define matrices
//--------------------------------------------------------------------------

//Fluid
matrix Hr = hr(VhF, VhF);
matrix Hi = hi(VhF, VhF);
matrix Q  = q(VhF, VhF);

{
ofstream fout(root+"Hr.txt");
fout<< Hr <<endl;
}
{
ofstream fout(root+"Hi.txt");
fout<< Hi <<endl;
}
{
ofstream fout(root+"Q.txt");
fout<< Q <<endl;
}

saveBoundariesLabels(VhF, boundaryLabel, root+"labels.txt")
saveRegionLabels(VhF, root+"regions.txt");
saveNodes(VhF,root+"Nodes.txt");
saveConnectivity(Th, VhF, root+"connectivity_table.txt");



